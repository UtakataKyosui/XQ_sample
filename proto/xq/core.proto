syntax = "proto3";

package xq;

import "google/protobuf/timestamp.proto";

// 投稿の公開範囲（Misskeyの概念に寄せつつ最小）
enum Visibility {
  VISIBILITY_UNSPECIFIED = 0;
  PUBLIC   = 1; // 連合可・連合先にも見える
  HOME     = 2; // ローカルTL等、連合はしない
  FOLLOWERS = 3; // フォロワー限定
  DIRECT   = 4; // ダイレクト
}

// ユーザ（Actor）
message User {
  uint64 id = 1;                       // Snowflake等
  string username = 2;                 // 一意
  string display_name = 3;             // 表示名
  string bio = 4;                      // プロフィール文（短文想定）
  string avatar_url = 5;               // 画像URL（将来はメディアIDでもOK）
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;

  // 将来拡張用（ロール、フィールド、カスタム絵文字等）
  // map<string, string> extra = 50;
}

// 投稿（Note）
message Post {
  uint64 id = 1;
  uint64 author_id = 2;                // User.id
  string text = 3;                     // 本文
  string cw = 4;                       // Content Warning / スポイラー任意
  Visibility visibility = 5;

  uint64 reply_to_id = 6;              // 返信先（無ければ0）
  uint64 repost_of_id = 7;             // リノート元（無ければ0）

  repeated string tags = 8;            // #tags（簡易）
  repeated uint64 mentions = 9;        // メンションされた User.id

  // 添付ファイルは最初はURLと種別だけ（将来はMediaエンティティへ）
  message Attachment {
    string url = 1;
    string mime = 2;
    uint32 size_bytes = 3;
  }
  repeated Attachment attachments = 10;

  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
  google.protobuf.Timestamp edited_at  = 22; // 編集されていない場合は未設定
}

// リクエスト・レスポンス型
message CreateUserRequest {
  string username = 1;
  string display_name = 2;
  string bio = 3;
  string avatar_url = 4;
}

message CreateUserResponse {
  User user = 1;
}

message GetUserRequest {
  uint64 id = 1;
}

message GetUserResponse {
  User user = 1;
}

message CreatePostRequest {
  uint64 author_id = 1;
  string text = 2;
  string cw = 3;
  Visibility visibility = 4;
  uint64 reply_to_id = 5;
  uint64 repost_of_id = 6;
  repeated string tags = 7;
  repeated uint64 mentions = 8;
  repeated Post.Attachment attachments = 9;
}

message CreatePostResponse {
  Post post = 1;
}

message GetPostsRequest {
  uint64 user_id = 1; // ユーザーIDを指定（0の場合は全投稿）
  uint32 limit = 2;
  uint64 before_id = 3; // ページネーション用
}

message GetPostsResponse {
  repeated Post posts = 1;
}

// リアルタイム配信用
message StreamEventsRequest {
  uint64 user_id = 1; // 配信を受けるユーザーID
  repeated string event_types = 2; // 受信したいイベントタイプ
}

message StreamEvent {
  string event_type = 1; // "post_created", "user_updated", etc.
  oneof event_data {
    Post post = 2;
    User user = 3;
  }
  google.protobuf.Timestamp timestamp = 4;
}

// XQ SNSサービス
service XQService {
  // ユーザー操作
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  
  // 投稿操作
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse);
  rpc GetPosts(GetPostsRequest) returns (GetPostsResponse);
  
  // リアルタイムストリーミング（双方向）
  rpc StreamEvents(stream StreamEventsRequest) returns (stream StreamEvent);
}
