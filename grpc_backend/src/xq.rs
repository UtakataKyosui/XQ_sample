// This file is @generated by prost-build.
/// ユーザ（Actor）
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct User {
    /// Snowflake等
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// 一意
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
    /// 表示名
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    /// プロフィール文（短文想定）
    #[prost(string, tag = "4")]
    pub bio: ::prost::alloc::string::String,
    /// 画像URL（将来はメディアIDでもOK）
    #[prost(string, tag = "5")]
    pub avatar_url: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// 投稿（Note）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Post {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// User.id
    #[prost(uint64, tag = "2")]
    pub author_id: u64,
    /// 本文
    #[prost(string, tag = "3")]
    pub text: ::prost::alloc::string::String,
    /// Content Warning / スポイラー任意
    #[prost(string, tag = "4")]
    pub cw: ::prost::alloc::string::String,
    #[prost(enumeration = "Visibility", tag = "5")]
    pub visibility: i32,
    /// 返信先（無ければ0）
    #[prost(uint64, tag = "6")]
    pub reply_to_id: u64,
    /// リノート元（無ければ0）
    #[prost(uint64, tag = "7")]
    pub repost_of_id: u64,
    /// \#tags（簡易）
    #[prost(string, repeated, tag = "8")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// メンションされた User.id
    #[prost(uint64, repeated, tag = "9")]
    pub mentions: ::prost::alloc::vec::Vec<u64>,
    #[prost(message, repeated, tag = "10")]
    pub attachments: ::prost::alloc::vec::Vec<post::Attachment>,
    #[prost(message, optional, tag = "20")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "21")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// 編集されていない場合は未設定
    #[prost(message, optional, tag = "22")]
    pub edited_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `Post`.
pub mod post {
    /// 添付ファイルは最初はURLと種別だけ（将来はMediaエンティティへ）
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Attachment {
        #[prost(string, tag = "1")]
        pub url: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub mime: ::prost::alloc::string::String,
        #[prost(uint32, tag = "3")]
        pub size_bytes: u32,
    }
}
/// リクエスト・レスポンス型
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateUserRequest {
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub bio: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub avatar_url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateUserResponse {
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<User>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetUserRequest {
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetUserResponse {
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<User>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePostRequest {
    #[prost(uint64, tag = "1")]
    pub author_id: u64,
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub cw: ::prost::alloc::string::String,
    #[prost(enumeration = "Visibility", tag = "4")]
    pub visibility: i32,
    #[prost(uint64, tag = "5")]
    pub reply_to_id: u64,
    #[prost(uint64, tag = "6")]
    pub repost_of_id: u64,
    #[prost(string, repeated, tag = "7")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint64, repeated, tag = "8")]
    pub mentions: ::prost::alloc::vec::Vec<u64>,
    #[prost(message, repeated, tag = "9")]
    pub attachments: ::prost::alloc::vec::Vec<post::Attachment>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePostResponse {
    #[prost(message, optional, tag = "1")]
    pub post: ::core::option::Option<Post>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetPostsRequest {
    /// ユーザーIDを指定（0の場合は全投稿）
    #[prost(uint64, tag = "1")]
    pub user_id: u64,
    #[prost(uint32, tag = "2")]
    pub limit: u32,
    /// ページネーション用
    #[prost(uint64, tag = "3")]
    pub before_id: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPostsResponse {
    #[prost(message, repeated, tag = "1")]
    pub posts: ::prost::alloc::vec::Vec<Post>,
}
/// リアルタイム配信用
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StreamEventsRequest {
    /// 配信を受けるユーザーID
    #[prost(uint64, tag = "1")]
    pub user_id: u64,
    /// 受信したいイベントタイプ
    #[prost(string, repeated, tag = "2")]
    pub event_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamEvent {
    /// "post_created", "user_updated", etc.
    #[prost(string, tag = "1")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(oneof = "stream_event::EventData", tags = "2, 3")]
    pub event_data: ::core::option::Option<stream_event::EventData>,
}
/// Nested message and enum types in `StreamEvent`.
pub mod stream_event {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventData {
        #[prost(message, tag = "2")]
        Post(super::Post),
        #[prost(message, tag = "3")]
        User(super::User),
    }
}
/// 投稿の公開範囲（Misskeyの概念に寄せつつ最小）
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Visibility {
    Unspecified = 0,
    /// 連合可・連合先にも見える
    Public = 1,
    /// ローカルTL等、連合はしない
    Home = 2,
    /// フォロワー限定
    Followers = 3,
    /// ダイレクト
    Direct = 4,
}
impl Visibility {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VISIBILITY_UNSPECIFIED",
            Self::Public => "PUBLIC",
            Self::Home => "HOME",
            Self::Followers => "FOLLOWERS",
            Self::Direct => "DIRECT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VISIBILITY_UNSPECIFIED" => Some(Self::Unspecified),
            "PUBLIC" => Some(Self::Public),
            "HOME" => Some(Self::Home),
            "FOLLOWERS" => Some(Self::Followers),
            "DIRECT" => Some(Self::Direct),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod xq_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with XqServiceServer.
    #[async_trait]
    pub trait XqService: std::marker::Send + std::marker::Sync + 'static {
        /// ユーザー操作
        async fn create_user(
            &self,
            request: tonic::Request<super::CreateUserRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateUserResponse>,
            tonic::Status,
        >;
        async fn get_user(
            &self,
            request: tonic::Request<super::GetUserRequest>,
        ) -> std::result::Result<tonic::Response<super::GetUserResponse>, tonic::Status>;
        /// 投稿操作
        async fn create_post(
            &self,
            request: tonic::Request<super::CreatePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePostResponse>,
            tonic::Status,
        >;
        async fn get_posts(
            &self,
            request: tonic::Request<super::GetPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPostsResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamEvents method.
        type StreamEventsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::StreamEvent, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// リアルタイムストリーミング（双方向）
        async fn stream_events(
            &self,
            request: tonic::Request<tonic::Streaming<super::StreamEventsRequest>>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamEventsStream>,
            tonic::Status,
        >;
    }
    /// XQ SNSサービス
    #[derive(Debug)]
    pub struct XqServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> XqServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for XqServiceServer<T>
    where
        T: XqService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/xq.XQService/CreateUser" => {
                    #[allow(non_camel_case_types)]
                    struct CreateUserSvc<T: XqService>(pub Arc<T>);
                    impl<
                        T: XqService,
                    > tonic::server::UnaryService<super::CreateUserRequest>
                    for CreateUserSvc<T> {
                        type Response = super::CreateUserResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateUserRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as XqService>::create_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateUserSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xq.XQService/GetUser" => {
                    #[allow(non_camel_case_types)]
                    struct GetUserSvc<T: XqService>(pub Arc<T>);
                    impl<T: XqService> tonic::server::UnaryService<super::GetUserRequest>
                    for GetUserSvc<T> {
                        type Response = super::GetUserResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetUserRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as XqService>::get_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUserSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xq.XQService/CreatePost" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePostSvc<T: XqService>(pub Arc<T>);
                    impl<
                        T: XqService,
                    > tonic::server::UnaryService<super::CreatePostRequest>
                    for CreatePostSvc<T> {
                        type Response = super::CreatePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreatePostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as XqService>::create_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePostSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xq.XQService/GetPosts" => {
                    #[allow(non_camel_case_types)]
                    struct GetPostsSvc<T: XqService>(pub Arc<T>);
                    impl<
                        T: XqService,
                    > tonic::server::UnaryService<super::GetPostsRequest>
                    for GetPostsSvc<T> {
                        type Response = super::GetPostsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPostsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as XqService>::get_posts(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPostsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/xq.XQService/StreamEvents" => {
                    #[allow(non_camel_case_types)]
                    struct StreamEventsSvc<T: XqService>(pub Arc<T>);
                    impl<
                        T: XqService,
                    > tonic::server::StreamingService<super::StreamEventsRequest>
                    for StreamEventsSvc<T> {
                        type Response = super::StreamEvent;
                        type ResponseStream = T::StreamEventsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::StreamEventsRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as XqService>::stream_events(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StreamEventsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for XqServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "xq.XQService";
    impl<T> tonic::server::NamedService for XqServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
